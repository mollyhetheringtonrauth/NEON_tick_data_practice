tck_tax <- read.csv('2_tck_taxonomyProcessed_concatenated.csv', header=T, stringsAsFactors=F)
tck_path <- read.csv('3_tck_pathogen_concatenated.csv', header=T, stringsAsFactors=F)
require(tidyverse)
tck_fd <- read_csv('1_tck_fielddata_concatenated.csv', header=T, stringsAsFactors=F)
tck_tax <- read_csv('2_tck_taxonomyProcessed_concatenated.csv', header=T, stringsAsFactors=F)
tck_path <- read_csv('3_tck_pathogen_concatenated.csv', header=T, stringsAsFactors=F)
tck_fd <- read_csv('1_tck_fielddata_concatenated.csv')
tck_tax <- read_csv('2_tck_taxonomyProcessed_concatenated.csv')
tck_path <- read_csv('3_tck_pathogen_concatenated.csv')
tck_fd
tck_tax
tck_path
names(tck_fd)
# filter data
sites <- select(data=tck_fd, siteID, decimalLongitude = lon, decimalLatitude = lat, elevation= elev, nlcdClass=vegType)
sites <- select(data=tck_fd, siteID)
sites <- select(data=tck_fd, nlcdClass)
sites <- select(tck_fd, siteID)
# filter data
sites <- tck_fd %>% select(siteID, decimalLongitude = lon, decimalLatitude = lat, elevation= elev, nlcdClass=vegType)
# filter data
sites <- tck_fd %>% select(siteID, decimalLongitude = "lon", decimalLatitude = "lat", elevation= "elev", nlcdClass="vegType")
# filter data
sites <- tck_fd %>% select(siteID, decimalLongitude = "lon", decimalLatitude = "lat", elevation= "elev", nlcdClass="vegType")
# filter data
sites <- tck_fd %>% select(siteID, decimalLongitude = lon, decimalLatitude = lat, elevation= elev, nlcdClass=vegType)
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass)
sites_summary <- sites %>%
group_by(siteID) %>%
summarize(mean_elev=mean(elev, na.r.m=T))
sites_summary
sites_summary <- sites %>%
group_by(siteID) %>%
summarize(mean_elev=mean(elev, na.r.m=T), lon, lat, elev, vegType)
sites_summary <- sites %>%
group_by(siteID) %>%
summarize(mean_elev=mean(elev, na.r.m=T), mean(lon)) #, lat, elev, vegType)
sites_summary
vegType_summary <- function(x,) {
values <- x
unique_values <- values %>% unique_values
return(unique_values)
}
vegType_summary <- function(x) {
values <- x
unique_values <- values %>% unique_values
return(unique_values)
}
vegType_summary(sites$vegType)
sites$vegType
values <- sites$vegTyep
values <- sites$vegType
values
values %>% unique_values
values %>% unique
vegType_summary <- function(x) {
values <- x
unique_values <- values %>% unique
return(unique_values)
}
vegType_summary(sites$vegType)
sites_summary <- sites %>%
group_by(siteID) %>%
summarize(mean_elev=mean(elev, na.r.m=T), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType))
example <- vegType_summary(sites$vegType)
example
str_c(example, sep='_')
paste(example, sep='_')
paste(example, collapse= '', sep='_')
paste(example, collapse= '_')
vegType_summary <- function(x) {
values <- x
unique_values <- values %>% unique %>% paste(collapse='_')
return(unique_values)
}
vegType_summary(sites$vegType)
sites_summary <- sites %>%
group_by(siteID) %>%
summarize(mean_elev=mean(elev, na.r.m=T), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType))
#
sites_summary
tck_fd
tck_fd$targetTaxaPresent
P_A <- function(x) {
if ('Y' %in% x) {
answer <- 'Y'
} else {
answer <- 'N'
}
return(answer)
}
p_A(tck_fd$targetTaxaPresent)
P_A(tck_fd$targetTaxaPresent)
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, targetTaxaPresent=present)
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, present=targetTaxaPresent)
vegType_summary <- function(x) {
values <- x
unique_values <- values %>% unique %>% paste(collapse='_')
return(unique_values)
}
P_A <- function(x) {
if ('Y' %in% x) {
answer <- 'Y'
} else {
answer <- 'N'
}
return(answer)
}
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, targetTaxaPresent=targetTaxaPresent)
sites_summary <- sites %>%
group_by(siteID) %>%
summarize(mean_elev=mean(elev, na.r.m=T), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType), ticksPresent=P_A(targetTaxaPresent))
#
sites_summary
names(tck_fd)
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, date=collectDate, targetTaxaPresent=targetTaxaPresent)
tck_fd$collectDate
as_date(tck_fd$collectDate)
require(lubricate)
as_date(tck_fd$collectDate)
install.packages('lubricate')
install.packages('lubridate')
install.packages("lubridate")
require(lubridate)
as_date(tck_fd$collectDate)
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, date=as_date(collectDate), targetTaxaPresent=targetTaxaPresent) %>% mutate()
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, date=collectDate, targetTaxaPresent=targetTaxaPresent) %>% mutate()
as_date(tck_fd$collectDate)
tck_fd$collectDate
tck_fd$collectDate <- as_date(tck_fd$collectDate)
head(tck_fd$collectDate)
example <- as_date(tck_fd$collectDate[1])
example
year(example)
# filter data
sites <- tck_fd %>% select(siteID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, date=collectDate, targetTaxaPresent=targetTaxaPresent) %>% mutate(year=year(date))
sites
sites_summary <- sites %>%
group_by(siteID, year) %>%
summarize(mean_elev=mean(elev, na.r.m=T), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType), ticksPresent=P_A(targetTaxaPresent))
#
sites_summary
# filter data
sites <- tck_fd %>% select(siteID, plotID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, date=collectDate, targetTaxaPresent=targetTaxaPresent) %>% mutate(year=year(date))
sites_summary <- sites %>%
group_by(siteID, year) %>%
summarize(count_plots=n(plotID), mean_elev=mean(elev, na.r.m=T), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType), ticksPresent=P_A(targetTaxaPresent))
number_sites_sampled <- function(x) {
number_sites <- x %>% unique %>% length
return(number_sites)
}
number_plots_sampled <- function(x) {
number_plots <- x %>% unique %>% length
return(number_plots)
}
# filter data
sites <- tck_fd %>% select(siteID, plotID, lon = decimalLongitude, lat = decimalLatitude, elev = elevation, vegType = nlcdClass, date=collectDate, targetTaxaPresent=targetTaxaPresent) %>% mutate(year=year(date))
sites_summary <- sites %>%
group_by(siteID, year) %>%
summarize(countPlots=number_plots_sampled(plotID), mean_elev=mean(elev, na.r.m=T), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType), ticksPresent=P_A(targetTaxaPresent))
#
sites_summary
tck_fd['siteID','plotID']
tck_fd %>% select(siteID, plotID)
tck_fd %>% select(siteID, plotID) %>% filter(siteID=='ABBY')
tck_fd %>% select(siteID, plotID, collectDate) %>% filter(siteID=='ABBY')
sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2018)
sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2018) %>%
which(sites$siteID == 'ABBY' && sites$year==2018)
sites$siteID == 'ABBY'
sites$year==2018
sites$siteID == 'ABBY' && sites$year==2018
sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2018)
check <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2018)
check
check %>% filter(year==2018)
check <- sites %>% select(siteID, plotID, year,)
check2018 <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2018)
#
sites_summary
check2018 <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2018)
check2017 <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2017)
check2016 <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='ABBY', year==2016)
check2018['plotID']
check2018['plotID'] %>% unique
check2017['plotID'] %>% unique
check2018['plotID'] %>% unique %>% sort()
check2018['plotID'] %>% unique %>% arrange()
check2018['plotID'] %>% unique %>% arrange(desc(plotID))
check2017['plotID'] %>% unique %>% arrange(desc(plotID))
mean_elev <- function(x) {
return( x %>% unique %>% mean())
}
sites_summary <- sites %>%
group_by(siteID, year) %>%
summarize(countPlots=number_plots_sampled(plotID), mean_elev=mean_elev(elev), lat=mean(lat), lon=mean(lon), vegType=vegType_summary(vegType), ticksPresent=P_A(targetTaxaPresent))
#
sites_summary
check2014 <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='BART', year==2014)
check2017 <- sites %>% select(siteID, plotID, year,) %>% filter(siteID=='BART', year==2017)
check2014['plotID'] %>% unique %>% arrange(desc(plotID))
check2017['plotID'] %>% unique %>% arrange(desc(plotID))
#
sites_summary
# filter data & create a new column year based on the column collectDate
sites <- tck_fd %>%
select(siteID, plotID, lon = decimalLongitude,
lat = decimalLatitude, elev = elevation,
vegType = nlcdClass, date=collectDate,
targetTaxaPresent=targetTaxaPresent) %>%
mutate(year=year(date))
sites_summary
# create a sf object of the sites_summary data so can project onto map
sites_summary_sf <- st_as_sf(sites_summary, coords=c('lon', 'lat'), crs='WGS84')
# create a sf object of the sites_summary data so can project onto map
sites_summary_sf <- st_as_sf(sites_summary, coords=c('lon', 'lat'))
sites_summary_sf
sites_summary_sf$geom
# create a sf object of the sites_summary data so can project onto map
sites_summary_sf <- st_as_sf(sites_summary, coords=c('lon', 'lat'), arg='identity')
# create a sf object of the sites_summary data so can project onto map
sites_summary_sf <- st_as_sf(sites_summary, coords=c('lon', 'lat'), crs=WGS84,arg='identity')
require(sp)
meuse
install.packages('sp')
install.packages("sp")
install.packages("sp")
require(sp)
meuse
data(meuse)
meuse
meuse_sf = st_as_sf(meuse, coords = c("x", "y"), crs = 28992, agr = "constant")
require(tidyverse) # use dplyr, lubriate
require(lubridate)
require(sf)
meuse_sf = st_as_sf(meuse, coords = c("x", "y"), crs = 28992, agr = "constant")
require(sf)
install.packages('sf')
install.packages("sf")
require(sf)
sites_summary_sf
require(spData)
require(spDataLarge)
names(world)
world_northAmerica <- world[world$continent == 'North America', ]
northAm <- st_union(world_northAmerica)
plot(northAm)
require(tidyverse) # use dplyr, lubriate
require(lubridate)
require(sf)
require(sp)
world_northAmerica <- world[world$continent == 'North America', ]
northAm <- st_union(world_northAmerica)
plot(northAm)
world_usa <- world[world$name_long =='United States',]
usa <- st_union(world_usa)
plot(usa)
vegType_summary <- function(x) {
## combines vegetation types across plots for each site
values <- x
unique_values <- values %>% unique %>% paste(collapse='_')
return(unique_values)
}
P_A <- function(x) {
## looks across all the plots sampled for a given site and returns 'Y' if ticks were found at any of the plots belonging to the site
if ('Y' %in% x) {
answer <- 'Y'
} else {
answer <- 'N'
}
return(answer)
}
number_plots_sampled <- function(x) {
## counts the number of plots sampled per site
number_plots <- x %>% unique %>% length
return(number_plots)
}
mean_elev <- function(x) {
## returns the mean elevation of the site based on the plots sampled
return( x %>% unique %>% mean())
}
tck_fd <- read_csv('1_tck_fielddata_concatenated.csv')
tck_tax <- read_csv('2_tck_taxonomyProcessed_concatenated.csv')
tck_path <- read_csv('3_tck_pathogen_concatenated.csv')
sites <- tck_fd %>%
select(siteID, plotID, lon = decimalLongitude,
lat = decimalLatitude, elev = elevation,
vegType = nlcdClass, date=collectDate,
targetTaxaPresent=targetTaxaPresent) %>%
mutate(year=year(date))
sites_mapping <- sites %>%
group_by(siteID, year) %>%
summarize(countPlots=number_plots_sampled(plotID),
mean_elev=mean_elev(elev), lat=mean(lat),
lon=mean(lon),
ticksPresent=P_A(targetTaxaPresent))
sites_mapping
# create a sf object of the sites_summary data so can project onto map
sites_summary_sf <- st_as_sf(sites_summary, coords=c('lon', 'lat'), crs=4326)
# create a sf object of the sites_summary data so can project onto map
sites_summary_sf <- st_as_sf(sites_mapping, coords=c('lon', 'lat'), crs=4326)
sites_summary_sf
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols() + tm_facets(by='year')
require(tmap)
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols() + tm_facets(by='year')
# create a sf object of the sites_summary data so can project onto map
sites_mapping_sf <- st_as_sf(sites_mapping, coords=c('lon', 'lat'), crs=4326)
sites_mapping_sf
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols() + tm_facets(by='year')
tm_shape(sites_mapping_sf) +tm_symbols() + tm_facets(by='year')
tm_shape(sites_mapping_sf) +tm_symbols(col='ticksPresent') + tm_facets(by='year')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='ticksPresent') + tm_facets(by='year')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='blue')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='year')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='elev')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='mean_elev')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='mean_elev') + tm_facets(by='year')
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='mean_elev') + tm_facets(by='year', as.layers=T)
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='ticksPresent') + tm_facets(by='year', as.layers=T)
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) +tm_symbols(col='ticksPresent') + tm_facets(by='year', as.layers=T, nrow=2)
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue') + tm_text(text=siteID)
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue') + tm_text(text='siteID')
ggplot() + geom_polygon(data=sites_mapping_sf, aes(lon, lat))
ggplot() + geom_polygon(data=sites_mapping_sf, aes(long, lat))
names(sites_mapping_sf)
ggplot() + geom_polygon(data=sites_mapping, aes(lon, lat))
require(ggmaps)
require(ggmap)
sites_mapping_convert <- fortify(sites_mapping_sf)
sites_mapping_sf
sites_mapping_convert
usa
plot(usa)
usa_convert <- fortify(usa)
usa
usa_convert
ggplot() + geom_polygon(data=usa_convert)
ggplot() + geom_polygon(data=usa_convert, aes(x=long, y=lat))
ggplot() + geom_polygon(data=usa_convert, aes(x=lon, y=lat))
usa
ggplot() + geom_polygon(data=usa, aes(x=long, y=lat))
usa<- st_read("../../Downloads/statesp020v/statesp020.shp") # available from
usa
usa<- st_read("../../Downloads/cb_2017_us_state_5m/cb_2017_us_state_5m.shp") # available from
usa
plot(usa)
terrorites_not_inlcuded <- c('American Samoa', 'Guam', 'Commonwealth of the Northern Mariana Islands', 'United States Virgin Islands')
usa2 <- usa %>% filter(!NAME %in% terrorites_not_inlcuded)
usa2
usa
bbox(usa2)
require(raster)
sub_usa <- crop(usa, extent(80,90,20,30))
st_bbox(usa)
plot(st_geometry(usa))
plot(st_geometry(usa2)
plot(st_geometry(usa2))
filtered_usa_df <- st_drop_geometry(filtered_usa)
plot(st_geometry(usa2))
bbox(usa2)
usa2
bbox(usa2)
sites_mapping
sites
sites_mapping <- sites %>%
group_by(siteID) %>%
summarize(countPlots=number_plots_sampled(plotID),
mean_elev=mean_elev(elev), lat=mean(lat),
lon=mean(lon),
ticksPresent=P_A(targetTaxaPresent))
sites_mapping
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point()
require(ggrepel)
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() +geom_label_repel(title=siteID)
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() +geom_label_repel(title='siteID')
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() +geom_text_repel(title='siteID')
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() + geom_text(title='siteID')
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() + geom_label(label='siteID')
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() + geom_label_repel(label='siteID')
sites_mapping
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() + geom_label_repel(label=siteID)
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point() + geom_label_repel(label=sites_mapping$siteID)
sites_mapping %>% select(siteID) %>% unique %>% length
sites_mapping
sites_mapping %>% select(siteID)
sites_mapping$ siteID
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point()
usa@bbox
usa@polygons
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point(color='blue')
usa
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point(color='blue') +
ggplot() + geom_polygon(data=usa, aes(x=long, y=lat))
ggplot(sites_mapping, aes(x=lon, y=lat)) +  geom_point(color='blue') +
ggplot() + geom_polygon(data=usa, aes(x=long, y=lat))
ggplot() + geom_polygon(data=usa, aes(x=long, y=lat))
world <- getMap(resolution ='low')
require(rworldmap)
ggplot() + geom_polygon(data=usa, aes(x=long, y=lat)) + coord_quickmap()
require(rworldmap)
summary(world)
world@bbox
world@data
st_bbox(world)
bb(world)
require(tmap)
bb(world)
tm_shape(usa) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
tm_shape(st_geometory(usa)) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
tm_shape(st_geometry(usa)) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
st_bbox(usa)
st_bbox(usa)
st_bbox(c(90,80,20,30))
st_bbox(c(xmin=74,xmax=80,ymax=50,ymin=30), crs=4326)
new_bbox <- st_bbox(c(xmin=74,xmax=80,ymax=50,ymin=30), crs=4326)
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
new_bbox <- st_bbox(c(xmin=-180,xmax=0,ymax=-14,ymin=71), crs=4326)
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
new_bbox
new_bbox <- st_bbox(c(xmin=-180,xmax=0,ymax=71,ymin=-14), crs=4326)
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
new_bbox <- st_bbox(c(xmin=-180,xmax=45,ymax=71,ymin=-14), crs=4326)
new_bbox <- st_bbox(c(xmin=-180,xmax=45,ymax=75,ymin=0), crs=4326)
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
new_bbox <- st_bbox(c(xmin=-180,xmax=-50,ymax=75,ymin=0), crs=4326)
new_bbox <- st_bbox(c(xmin=-180,xmax=-50,ymax=75,ymin=15), crs=4326)
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
tm_shape(st_geometry(usa), bbox=new_bbox, fill='white') +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue')
tm_shape(st_geometry(usa), bbox=new_bbox, fill='white') +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='blue', size=0.5)
sites_mapping_sf
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='ticksPresent', size=0.5) + tm_facets(by='year')
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() +
tm_shape(sites_mapping_sf) + tm_symbols(col='ticksPresent', size=0.5) + tm_facets(by='year')
tm_shape(sites_mapping_sf) + tm_symbols(col='ticksPresent', size=0.5) + tm_facets(by='year')
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_fill('white')
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() + tm_shape(sites_mapping_sf) + tm_symbols(col='ticksPresent', size=0.5) + tm_facets(by='year', syn=T)
usa
tm_shape(st_geometry(usa), bbox=new_bbox) +tm_polygons() +  tm_shape(sites_mapping_sf) + tm_symbols(col='ticksPresent', size=0.25) + tm_facets(by='year', syn=T)
# filter data & create a new column year based on the column collectDate
names(tck_fd)
tck_fd$plotType
# filter data & create a new column year based on the column collectDate
names(tck_fd)
plots <- tck_fd %>% select(siteID, plotID, lon = decimalLongitude,
lat = decimalLatitude, elev = elevation,
vegType = nlcdClass, date=collectDate,
targetTaxaPresent=targetTaxaPresent, totalSampledArea) %>%
mutate(year=year(date))
require(tidyverse) # use dplyr, lubriate
require(lubridate)
require(sf)
require(sp)
require(tmap)
#################
### FUNCTIONS ###
#################
vegType_summary <- function(x) {
## combines vegetation types across plots for each site
values <- x
unique_values <- values %>% unique %>% paste(collapse='_')
return(unique_values)
}
P_A <- function(x) {
## looks across all the plots sampled for a given site and returns 'Y' if ticks were found at any of the plots belonging to the site
if ('Y' %in% x) {
answer <- 'Y'
} else {
answer <- 'N'
}
return(answer)
}
number_plots_sampled <- function(x) {
## counts the number of plots sampled per site
number_plots <- x %>% unique %>% length
return(number_plots)
}
mean_elev <- function(x) {
## returns the mean elevation of the site based on the plots sampled
return( x %>% unique %>% mean())
}
#################
### LOAD DATA ###
#################
tck_fd <- read_csv('1_tck_fielddata_concatenated.csv')
tck_tax <- read_csv('2_tck_taxonomyProcessed_concatenated.csv')
tck_path <- read_csv('3_tck_pathogen_concatenated.csv')
# convert collectDate to DateTime object
tck_fd$collectDate <- as_date(tck_fd$collectDate)
# filter data & create a new column year based on the column collectDate
names(tck_fd)
plots <- tck_fd %>% select(siteID, plotID, lon = decimalLongitude,
lat = decimalLatitude, elev = elevation,
vegType = nlcdClass, date=collectDate,
targetTaxaPresent=targetTaxaPresent, totalSampledArea) %>%
mutate(year=year(date))
plots
tck_fd <- read_csv('1_tck_fielddata_concatenated.csv')
# convert collectDate to DateTime object
tck_fd$collectDate <- as_date(tck_fd$collectDate)
# filter data & create a new column year based on the column collectDate
names(tck_fd)
plots <- tck_fd %>% select(siteID, plotID, lon = decimalLongitude,
lat = decimalLatitude, elev = elevation,
vegType = nlcdClass, date=collectDate,
targetTaxaPresent=targetTaxaPresent, totalSampledArea) %>%
mutate(year=year(date))
